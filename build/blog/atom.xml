<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://furion.icu/blog</id>
    <title>QFramework Blog</title>
    <updated>2021-08-11T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://furion.icu/blog"/>
    <subtitle>QFramework Blog</subtitle>
    <icon>https://furion.icu/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[6. .NET 6 Preview 7 尝鲜]]></title>
        <id>net6-preview7</id>
        <link href="https://furion.icu/blog/net6-preview7"/>
        <updated>2021-08-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[2021 年 08 月 11 日，微软发布了 .NET 6 Preview 7 版本，Furion 在当天第一时间适配了该版本，并发布 Furion v3.0.0-rc.2 版本。]]></summary>
        <content type="html"><![CDATA[<p><strong>2021 年 08 月 11 日，微软发布了 <code>.NET 6 Preview 7</code> 版本，<code>Furion</code> 在当天第一时间适配了该版本，并发布 <code>Furion v3.0.0-rc.2</code> 版本。</strong></p><p><a href="https://gitee.com/dotnetchina/Furion/tree/3.0.0-rc.2/">Furion .NET 6 Preview 7 源码地址</a></p><h2>安装 <code>.NET 6 Preview 6 SDK</code></h2><p>尝鲜之前，首先先安装 <code>.NET 6 Preview 7 SDK</code>，下载地址：<a href="https://dotnet.microsoft.com/download/dotnet/6.0">https://dotnet.microsoft.com/download/dotnet/6.0</a></p><p>下载对应系统和处理器版本即可。</p><h2>旧项目升级</h2><p>编辑所有 <code>.csproj</code> 项目，修改 <code>&lt;TargetFramework&gt;net5.0&lt;/TargetFramework&gt;</code> 为 <code>&lt;TargetFramework&gt;net6.0&lt;/TargetFramework&gt;</code>。</p><p>同时升级所有 <code>Microsoft</code> 和 <code>Furion</code> 包为最新版本，<code>Furion</code> 最新版本为：<code>v3.0.0-rc.1</code>。</p><h2>新项目使用</h2><h3>升级 <code>Visual Studio 2019</code></h3><p>目前 <code>.NET 6 Preview 7</code> 支持使用 <code>Visual Studio 2019 Preview 16.11.0 Preview 4.0</code> 版本，<strong>注意是 <code>Preview</code> 最新版本</strong>。下载地址：<a href="https://visualstudio.microsoft.com/zh-hans/thank-you-downloading-visual-studio/?sku=enterprise&amp;ch=pre&amp;rel=16">https://visualstudio.microsoft.com/zh-hans/thank-you-downloading-visual-studio/?sku=enterprise&amp;ch=pre&amp;rel=16</a></p><p>已经安装了 <code>Visual Studio 2019 Preview</code> 版本的朋友直接升级到最新版即可。</p><p>:::note 特别说明</p><p>如果使用 <code>Visual Studio Code</code> 开发，可忽略此选项。</p><p>:::</p><h3>第一个例子</h3><p><code>Furion v3.0.0-rc.2</code> 目前提供了所有类型的脚手架，版本号统一 <code>3.0.0-rc.2</code>。</p><p>安装脚手架，打开 <code>CMD/Powershell</code> 执行以下命令：</p><pre><code class="language-bash">dotnet new --install Furion.Template.Api::3.0.0-rc.2
</code></pre><p>创建项目</p><pre><code class="language-bash">dotnet new furionapi -n FurionNET6
</code></pre><h3>打开并启动项目</h3><p>打开浏览器查看效果即可。</p>]]></content>
        <author>
            <name>dotNET China</name>
            <uri>https://www.chinadot.net</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[5. 在控制台中使用]]></title>
        <id>console</id>
        <link href="https://furion.icu/blog/console"/>
        <updated>2021-07-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Furion 从 v2.15.3+ 版本开始，支持全平台应用程序开发，包括 Web，控制台，WinForm，WPF，Xamarin/MAUI 等。]]></summary>
        <content type="html"><![CDATA[<p><code>Furion</code> 从 <code>v2.15.3+</code> 版本开始，支持全平台应用程序开发，包括 <code>Web</code>，<code>控制台</code>，<code>WinForm</code>，<code>WPF</code>，<code>Xamarin/MAUI</code> 等。</p><p>在控制台中使用示例：</p><pre><code class="language-cs">using Furion;
using Furion.DependencyInjection;
using Furion.RemoteRequest.Extensions;
using Microsoft.Extensions.DependencyInjection;
using System;

namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {
            // 创建一个服务容器
            var services = Inject.Create();
            // 注册服务
            services.AddRemoteRequest();
            // 所有服务注册完毕后调用 Build() 构建
            services.Build();

            // 使用
            var helloService = App.GetService&lt;IHelloService&gt;();
            Console.WriteLine(helloService.SayHello());

            Console.WriteLine(&quot;=============&quot;);

            var baidu = &quot;https://www.baidu.com&quot;.GetAsStringAsync().GetAwaiter().GetResult();
            Console.WriteLine(baidu);
        }
    }

    public interface IHelloService
    {
        string SayHello();
    }
    public class HelloService : IHelloService, ITransient
    {
        public string SayHello()
        {
            return &quot;Hello Furion.&quot;;
        }
    }
}
</code></pre><p>以上代码通过 <code>var services = Inject.Create();</code> 创建一个服务集合，最后通过 <code>services.Build()</code> 即可完成初始化。</p>]]></content>
        <author>
            <name>dotNET China</name>
            <uri>https://www.chinadot.net</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[4. .NET 6 Preview 6 尝鲜]]></title>
        <id>net6-preview6</id>
        <link href="https://furion.icu/blog/net6-preview6"/>
        <updated>2021-07-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[2021 年 07 月 15 日，微软发布了 .NET 6 Preview 6 版本，Furion 在当天第一时间适配了该版本，并发布 Furion v3.0.0-rc.1 版本。]]></summary>
        <content type="html"><![CDATA[<p><strong>2021 年 07 月 15 日，微软发布了 <code>.NET 6 Preview 6</code> 版本，<code>Furion</code> 在当天第一时间适配了该版本，并发布 <code>Furion v3.0.0-rc.1</code> 版本。</strong></p><p><a href="https://gitee.com/dotnetchina/Furion/tree/3.0.0-rc.1/">Furion .NET 6 Preview 6 源码地址</a></p><h2>安装 <code>.NET 6 Preview 6 SDK</code></h2><p>尝鲜之前，首先先安装 <code>.NET 6 Preview 6 SDK</code>，下载地址：<a href="https://dotnet.microsoft.com/download/dotnet/6.0">https://dotnet.microsoft.com/download/dotnet/6.0</a></p><p>下载对应系统和处理器版本即可。</p><h2>旧项目升级</h2><p>编辑所有 <code>.csproj</code> 项目，修改 <code>&lt;TargetFramework&gt;net5.0&lt;/TargetFramework&gt;</code> 为 <code>&lt;TargetFramework&gt;net6.0&lt;/TargetFramework&gt;</code>。</p><p>同时升级所有 <code>Microsoft</code> 和 <code>Furion</code> 包为最新版本，<code>Furion</code> 最新版本为：<code>v3.0.0-rc.1</code>。</p><h2>新项目使用</h2><h3>升级 <code>Visual Studio 2019</code></h3><p>目前 <code>.NET 6 Preview 6</code> 支持使用 <code>Visual Studio 2019 Preview 16.11.0 Preview 3.0</code> 版本，<strong>注意是 <code>Preview</code> 最新版本</strong>。下载地址：<a href="https://visualstudio.microsoft.com/zh-hans/thank-you-downloading-visual-studio/?sku=enterprise&amp;ch=pre&amp;rel=16">https://visualstudio.microsoft.com/zh-hans/thank-you-downloading-visual-studio/?sku=enterprise&amp;ch=pre&amp;rel=16</a></p><p>已经安装了 <code>Visual Studio 2019 Preview</code> 版本的朋友直接升级到最新版即可。</p><p>:::note 特别说明</p><p>如果使用 <code>Visual Studio Code</code> 开发，可忽略此选项。</p><p>:::</p><h3>第一个例子</h3><p><code>Furion v3.0.0-rc.1</code> 目前提供了所有类型的脚手架，版本号统一 <code>3.0.0-rc.1</code>。</p><p>安装脚手架，打开 <code>CMD/Powershell</code> 执行以下命令：</p><pre><code class="language-bash">dotnet new --install Furion.Template.Api::3.0.0-rc.1
</code></pre><p>创建项目</p><pre><code class="language-bash">dotnet new furionapi -n FurionNET6
</code></pre><h3>打开并启动项目</h3><p>打开浏览器查看效果即可。</p>]]></content>
        <author>
            <name>dotNET China</name>
            <uri>https://www.chinadot.net</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[3. .NET 6 Preview 5 尝鲜]]></title>
        <id>net6-preview5</id>
        <link href="https://furion.icu/blog/net6-preview5"/>
        <updated>2021-06-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[2021 年 06 月 18 日，微软发布了 .NET 6 Preview 5 版本，Furion 在当天第一时间适配了该版本，并发布 Furion v3.0.0-preview.5.21301.9 版本。]]></summary>
        <content type="html"><![CDATA[<p><strong>2021 年 06 月 18 日，微软发布了 <code>.NET 6 Preview 5</code> 版本，<code>Furion</code> 在当天第一时间适配了该版本，并发布 <code>Furion v3.0.0-preview.5.21301.9</code> 版本。</strong></p><p><a href="https://gitee.com/dotnetchina/Furion/tree/net6.0-preview5/">Furion .NET 6 Preview 5 源码地址</a></p><h2>等不及尝鲜了</h2><h3>安装 <code>.NET 6 Preview 5 SDK</code></h3><p>尝鲜之前，首先先安装 <code>.NET 6 Preview 5 SDK</code>，下载地址：<a href="https://dotnet.microsoft.com/download/dotnet/6.0">https://dotnet.microsoft.com/download/dotnet/6.0</a></p><p>下载对应系统和处理器版本即可。</p><h3>升级 <code>Visual Studio 2019</code></h3><p>目前 <code>.NET 6 Preview 5</code> 支持使用 <code>Visual Studio 2019 Preview 16.11.0 Preview 2.0</code> 版本，<strong>注意是 <code>Preview</code> 最新版本</strong>。下载地址：<a href="https://visualstudio.microsoft.com/zh-hans/thank-you-downloading-visual-studio/?sku=enterprise&amp;ch=pre&amp;rel=16">https://visualstudio.microsoft.com/zh-hans/thank-you-downloading-visual-studio/?sku=enterprise&amp;ch=pre&amp;rel=16</a></p><p>已经安装了 <code>Visual Studio 2019 Preview</code> 版本的朋友直接升级到最新版即可。</p><p>:::note 特别说明</p><p>如果使用 <code>Visual Studio Code</code> 开发，可忽略此选项。</p><p>:::</p><h3>第一个例子</h3><p><code>Furion v3.0.0-preview.5.21301.9</code> 目前提供了所有类型的脚手架，版本号统一 <code>3.0.0-preview.5.21301.9</code>。</p><p>安装脚手架，打开 <code>CMD/Powershell</code> 执行以下命令：</p><pre><code class="language-bash">dotnet new --install Furion.Template.Api::3.0.0-preview.5.21301.9
</code></pre><p>创建项目</p><pre><code class="language-bash">dotnet new furionapi -n FurionNET6
</code></pre><h3>打开并启动项目</h3><p>打开浏览器查看效果即可。</p>]]></content>
        <author>
            <name>dotNET China</name>
            <uri>https://www.chinadot.net</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2. 文件上传下载]]></title>
        <id>fileupload-download</id>
        <link href="https://furion.icu/blog/fileupload-download"/>
        <updated>2021-02-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[文件下载]]></summary>
        <content type="html"><![CDATA[<h2>文件下载</h2><pre><code class="language-cs">[HttpGet, NonUnify]
public IActionResult FileDownload(string path, string fileName)
{
    string filePath = &quot;这里获取完整的文件下载路径&quot;;
    return new FileStreamResult(new FileStream(filePath, FileMode.Open), &quot;application/octet-stream&quot;) { FileDownloadName = fileName };
}
</code></pre><p>:::note 关于前端获取文件名</p><p>如果前端获取不到文件夹，可添加以下配置：</p><pre><code class="language-cs">_httpContextAccessor.HttpContext.Response.Headers.Add(&quot;Content-Disposition&quot;, $&quot;attachment; filename={文件名}&quot;);
_httpContextAccessor.HttpContext.Response.Headers.Add(&quot;Access-Control-Expose-Headers&quot;, &quot;Content-Disposition&quot;);
</code></pre><p>:::</p><h2>文件上传</h2><pre><code class="language-cs">[HttpPost, NonUnify]
public async Task&lt;IActionResult&gt; UploadFileAsync(List&lt;IFormFile&gt; files)
{
    // 保存到网站根目录下的 uploads 目录
    var savePath = Path.Combine(App.HostEnvironment.ContentRootPath, &quot;uploads&quot;);
    if(!Directory.Exists(savePath)) Directory.CreateDirectory(savePath);

    long size = files.Sum(f =&gt; f.Length);

    foreach (var formFile in files)
    {
        if (formFile.Length &gt; 0)
        {
            // 避免文件名重复，采用 GUID 生成
            var filePath = Path.Combine(savePath, Guid.NewGuid().ToString(&quot;N&quot;) + Path.GetExtension(formFile.FileName));  // 可以替代为你需要存储的真实路径

            using (var stream = System.IO.File.Create(filePath))
            {
                await formFile.CopyToAsync(stream);
            }
        }
    }

    // 在动态 API 直接返回对象即可，无需 OK 和 IActionResult
    return Ok(new { count = files.Count, size });
}
</code></pre>]]></content>
        <author>
            <name>dotNET China</name>
            <uri>https://www.chinadot.net</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[1. HttpContext 应用]]></title>
        <id>httpcontext</id>
        <link href="https://furion.icu/blog/httpcontext"/>
        <updated>2021-02-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[HttpContext 重大调整]]></summary>
        <content type="html"><![CDATA[<h2>HttpContext 重大调整</h2><p>在 <code>ASP.NET</code> 的时代，我们通常通过 <code>HttpContext</code> 全局静态类获取请求上下文，但在 <code>ASP.NET Core</code> 中，<code>HttpContext</code> 是一个非静态的抽象类，无法手动创建，也无法通过静态获取。</p><p>虽然在 <code>ASP.NET Core</code> 中无法直接获取 <code>HttpContext</code> 对象。但是微软也提供了注入 <code>IHttpContextAccessor</code> 方式获取。</p><h2>HttpContext 多种获取方式</h2><h3>在 <code>ControllerBase</code> 派生类中</h3><p>在 <code>ControllerBase</code> 派生类中，我们可以直接通过 <code>HttpContext</code> 属性获取 <code>HttpContext</code> 对象。</p><h3>通过注入 <code>IHttpContextAccessor</code></h3><p>在 <code>Furion</code> 框架中，默认已经注册了 <code>IHttpContextAccessor</code> 服务，所以我们可以通过构造函数注入该对象获取。</p><pre><code class="language-cs" metastring="{3,5}">public class AppService
{
    public AppService(IHttpContextAccessor httpContextAccessor)
    {
        var httpContext = httpContextAccessor.HttpContext;
    }
}
</code></pre><h3>通过 <code>App.HttpContext</code></h3><p><code>App</code> 静态类也提供了 <code>App.HttpContext</code> 获取 <code>HttpContext</code> 对象。</p><h2><code>HttpContext</code> 拓展方法</h2><p><code>Furion</code> 框架也提供了一些常用的 <code>HttpContext</code> 拓展方法</p><h3>获取当前请求的特性</h3><pre><code class="language-cs">var attribute = httpContext.GetMetadata&lt;SomeAttribute&gt;();
</code></pre><h3>设置 <code>Swagger</code> 自动授权</h3><pre><code class="language-cs">httpContext.SigninToSwagger(&quot;你的token&quot;);
</code></pre><h3>退出 <code>Swagger</code> 授权</h3><pre><code class="language-cs">httpContext.SignoutToSwagger();
</code></pre><h3>获取本地 IP 地址</h3><pre><code class="language-cs">var ipv4 = httpContext.GetLocalIpAddressToIPv4();
var ipv6 = httpContext.GetLocalIpAddressToIPv6();
</code></pre><h3>获取客户端 IP 地址</h3><pre><code class="language-cs">var ipv4 = httpContext.GetRemoteIpAddressToIPv4();
var ipv6 = httpContext.GetRemoteIpAddressToIPv6();
</code></pre>]]></content>
        <author>
            <name>dotNET China</name>
            <uri>https://www.chinadot.net</uri>
        </author>
    </entry>
</feed>