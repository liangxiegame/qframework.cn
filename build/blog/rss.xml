<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>QFramework Blog</title>
        <link>http://doc.qframework.cn/blog</link>
        <description>QFramework Blog</description>
        <lastBuildDate>Sun, 13 Mar 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[QFramework Pro 开发日志（六）一键生成类图功能介绍]]></title>
            <link>http://doc.qframework.cn/blog/devnote6</link>
            <guid>devnote6</guid>
            <pubDate>Sun, 13 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[这个功能连续开发了三天，现在完成了一个基本的雏形。]]></description>
            <content:encoded><![CDATA[<p>这个功能连续开发了三天，现在完成了一个基本的雏形。</p><p>先说说，为啥做这个功能吧。</p><p>作为 Unity 开发者，不管是在做游戏还是在做工具、方案、学习源码的时候，多多少少都会需要魔改一些其他插件、框架、工具的代码。</p><p>而魔改的前提，是自己能够快速理解代码的大体结构。</p><p>如何快速理解代码的大体结构？自己画一遍简单的类图是比较快的方式。</p><p>于是笔者就制作了一个快速根据目录内的代码生成简单继承的类图的功能。</p><p>先看下使用流程。</p><ul><li>在某个代码目录创建一个类图文件，操作如下:</li></ul><p><img src="https://file.liangxiegame.com/1de75be5-8b33-4491-a3e0-8d7f3270f8d5.png" alt="image.png"/></p><ul><li>创建之后结果如下:</li></ul><p><img src="https://file.liangxiegame.com/876b9a15-3b3b-4900-b163-d68a5b9bb1ca.png" alt="image.png"/></p><ul><li>点击，Inspector 上的 Parse 按钮，就会生成类图，如下：</li></ul><p><img src="https://file.liangxiegame.com/272623f4-fce0-4f2e-a534-bd21219326bc.png" alt="image.png"/></p><ul><li>有点看不清，放大看一下吧。</li></ul><p><img src="https://file.liangxiegame.com/677275df-eab1-4b7d-930e-3efe858ef2d9.png" alt="image.png"/></p><p>会比较清晰地显示继承结构。</p><p>点击方法 或者 类图上的 See 按钮，可以直接打开脚本文件，查看代码，如下：</p><p><img src="https://file.liangxiegame.com/4c6e7e74-a319-4a18-818c-26b037ad028c.png" alt="image.png"/></p><p><img src="https://file.liangxiegame.com/15de3d4d-3def-4330-8f01-68259c072cb3.png" alt="image.png"/></p><ul><li>如果给这个方法再写点注释，然后再点击 Parse。</li></ul><p><img src="https://file.liangxiegame.com/17c68123-9111-40d8-8dc4-41b6fa96ca55.png" alt="image.png"/></p><ul><li>结果如下：</li></ul><p><img src="https://file.liangxiegame.com/9388febc-9e95-407a-a387-261d950f7da7.png" alt="image.png"/></p><ul><li>就会将注释显示在类图上。</li><li>如何快速找到某个类的类图，可以查看 类图文件的 Inspector 上，如下：</li></ul><p><img src="https://file.liangxiegame.com/b65c99e5-b553-4daf-a1d8-d16b243c9bf7.png" alt="image.png"/></p><ul><li>点击 Show In Graph 就会，定位到对应的类图上，如下：</li></ul><p><img src="https://file.liangxiegame.com/e38b2ffe-6a3e-4aec-a972-a674e9c25c32.png" alt="image.png"/></p><p><img src="https://file.liangxiegame.com/4f798246-22dd-4c16-94f5-652f1df22fb8.png" alt="image.png"/></p><p>现在只是一个功能雏形，后续想要更方便易用需要做很多优化，比如支持搜索功能，中英文切换等等。</p><p>由于这个功能解决的痛点，首先就是自己的痛点，因为 QFramework Pro 接下来有不少工作要做，比如参考一些其他插件或者库的代码，魔改一些开源方案，需要写足够的注释，设计更好用的 API，等等，都会用到，目前的功能暂时足够使用了。</p><p>由于自己会大量使用这个功能，所以肯定有不够用的时候，到时候再增加功能即可。</p><p>写这个功能，去研究了一下 Roslyn 和 xNode。</p><p>Roslyn 其实自己很早就接触过，但是一直没花时间去好好研究，这次正好趁着做这个功能研究了一下，Roslyn 真的很强大，分析代码、生成代码、编译代码、执行代码样样精通，而目前自己只用到了分析代码的功能，后边 QF Pro 还会用到 生成代码的功能，正好这次打个基础，先用起来。</p><p>xNode 相比 NodeGraphProcessor，支持更多节点数量，本来一键生成类图的功能，是用 NodeGraphProcessor 做的，但是当类图超过 30 个的时候，NodeGraphProcessor 就开始卡顿了，如果只支持 30 个类图，那这个功能就太鸡肋了。</p><p>于是自己就尝试了一下 xNode，发现 xNode 在 100 多个类图的时候才开始有点卡顿，笔者猜测， 如果类图节点不在屏幕内 xNode 不会进行渲染，而 NodeGraphProcessor 则会进行渲染，所以根据实际的测试结果，这次的一键生成类图的功能选择使用 xNode 完成。</p><p>那 NodeGraphProcessor 就不用了吗？</p><p>当然不是，NodeGraphProcessor 也还会用，两者各有优缺点，NodeGraphProcessor 自带的功能丰富，颜值高，同屏渲染性能更优，xNode 更稳定，支持节点类的重命名，不在屏内的节点渲染优化，代码更少更清爽等等。</p><p>这两个方案，会慢慢合并，合并叫 GraphKit，NodeGraphProcessor 是 GraphKit UIElement 渲染方式的方案，xNode 是 GraphKit IMGUI 渲染方式的方案，而底层的很多代码都和 QFramework 的一部分代码是重合的，所以可以将底层很多代码用 QFramework 进行重构。</p><p>重构完成后，还会再参考参考其他的方案，去粗取精，不断优化。</p><p>三天时间，同时学习 Roslyn 和 xNode 再加上要实现一键生成类图的功能，有点吃不消，脑子快炸了，所以接下来就做做比较轻松的优化、写文档的工作，然后准备提交到 AssetStore。</p><p>再补充一句，自己使用这个功能，基本都是在某一个模块某一个目录中使用，一是性能问题，二是一下子看 1000 多个类， 也看不完，不如一小块一小块开始看。</p><p>实现好了这个功能，就算上手了 Roslyn 和 xNode，有了以后做各种代码生成和其他功能的基础，v0.4.0 版本完成再说吧。</p><p>这一篇就说到这。</p><h2>各种地址</h2><ul><li>QFramework Pro AssetStore 主页：<a href="http://u3d.as/SJ9">http://u3d.as/SJ9</a></li><li>快速迭代版（众筹地址）：<a href="https://www.gamepixedu.com/course/72">https://www.gamepixedu.com/course/72</a></li><li>QFramework 开源版地址：<a href="https://github.com/liangxiegame/QFramework">https://github.com/liangxiegame/QFramework</a></li><li>QFramework QQ 群：623597263</li><li>此文首发于 <a href="http://doc.qframework.cn">http://doc.qframework.cn</a> 或 <a href="https://qframework.cn">https://qframework.cn</a></li><li>转载请注明地址：<a href="https://liangxiegame.com">https://liangxiegame.com</a>  在这个地址可以看到我全部的作品链接</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[QFramework Pro 开发日志（五）DocKit 功能优化 v0.3.2]]></title>
            <link>http://doc.qframework.cn/blog/devnote5</link>
            <guid>devnote5</guid>
            <pubDate>Thu, 10 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[昨天用 DocKit 一口气写了 3 个文档。]]></description>
            <content:encoded><![CDATA[<p>昨天用 DocKit 一口气写了 3 个文档。</p><p>使用的过程中发现可以优化的地方。</p><p>之前创建节点的流程如下：</p><ul><li>鼠标右键 选择创建节点</li></ul><p><img src="https://file.liangxiegame.com/d093115c-360d-4b9f-9522-ee448db5c196.png" alt="image.png"/></p><ul><li>弹出窗口，选择 DocKit/TextNode 文本节点</li></ul><p><img src="https://file.liangxiegame.com/33411149-700d-4185-bcd1-fb1b0497868c.png" alt="image.png"/></p><ul><li>创建成功</li></ul><p><img src="https://file.liangxiegame.com/628c2c7b-51ed-47cd-a680-335844891626.png" alt="image.png"/></p><p>总共两步流程，而像创建节点在编写文档是反复使用的功能，所以有优化一下。</p><p>现在步骤如下：</p><ul><li>右键选择文本节点</li></ul><p><img src="https://file.liangxiegame.com/67735aa3-dd73-460a-86d6-a855b654496c.png" alt="image.png"/></p><ul><li>创建成功</li></ul><p><img src="https://file.liangxiegame.com/628c2c7b-51ed-47cd-a680-335844891626.png" alt="image.png"/></p><p>现在创建节点的流程变成了一步。</p><p>这个问题，是自己经过大量的使用发现的，产品肯定要做很多测试。</p><p>这个功能已经在自己平台版本发布，AssetStore 版本会在 v0.3.0 版本审核通过后立即提交。</p><p>另外，QF Pro 的下个功能已经构思好了。</p><p>大概就是可以分析一个目录的代码，将代码解析成类似 UML 类图的方式在 可视化编辑器里显示。</p><p>然后也可以在 可视化编辑器里设计 UML 类图或者设计决定版的架构，然后直接一键生成代码，类似 uFrame 的 Designer，所以第二个功能起名叫 ArchitectureDesigner 即，架构设计器，包含生成某个目录代码的类图功能，和通过类图生成代码功能。</p><p>这个就是 v0.4.0 版本的功能预告啦。</p><p>OK，这篇就到这里啦。</p><h2>各种地址</h2><ul><li>AssetStore 版本地址(v0.3.1 审核中)：<a href="http://u3d.as/SJ9">http://u3d.as/SJ9</a></li><li>自己平台地址（v0.3.2 已发布)：<a href="https://www.gamepixedu.com/course/72">https://www.gamepixedu.com/course/72</a></li><li>QFramework 开源版地址：<a href="https://github.com/liangxiegame/QFramework">https://github.com/liangxiegame/QFramework</a></li><li>QFramework QQ 群：623597263</li><li>此文首发于 <a href="http://doc.qframework.cn">http://doc.qframework.cn</a> 或 <a href="https://qframework.cn">https://qframework.cn</a></li><li>转载请注明地址：<a href="https://liangxiegame.com">https://liangxiegame.com</a>  在这个地址可以看到我全部的作品链接</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[QFramework Pro 开发日志（四）0.3 版本正式发布]]></title>
            <link>http://doc.qframework.cn/blog/devnote4</link>
            <guid>devnote4</guid>
            <pubDate>Wed, 09 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[刚刚提交了 QFramework Pro v0.3 版本，主要功能如下:]]></description>
            <content:encoded><![CDATA[<p>刚刚提交了 QFramework Pro v0.3 版本，主要功能如下:</p><ol><li>使用可视化编程的方式 编写、阅读文档（图打错字了）</li></ol><p><img src="https://file.liangxiegame.com/b8698186-51e9-4174-b73f-e50611f6297e.png" alt="01.Editor.CN.png"/></p><ol start="2"><li>创建的文档会自动显示在管理窗口</li></ol><p><img src="https://file.liangxiegame.com/6580518f-0957-452b-8a05-706359d07eec.png" alt="02.Management.CN.png"/></p><ol start="3"><li>支持生成简单的 Markdown 文件</li></ol><p><img src="https://file.liangxiegame.com/c4cf3b59-713e-4a07-85d8-998e17051714.png" alt="03.MarkdownExport.CN.png"/></p><ol start="4"><li>生成的 Markdown 展示（不是插件功能，下图是用其他软件打开的）</li></ol><p><img src="https://file.liangxiegame.com/100bde3a-d7d6-4473-8eb4-513c178efff7.png" alt="04.MarkdownPreview.CN.png"/></p><p>自从 DocKit 核心功能完成后，花了大量时间优化使用体验和一些 bug，有的 bug 实在绕不开了，所以提供了一个重新加载的功能。</p><p>就像电脑死记了，先重启一样😂。</p><p>NodeGraphProcessor 不管从功能、颜值、还是性能上都是最好的方案。</p><p>但是现在有点像用相对稳定 bug 少的 xnode 了。</p><p>等我再纠结纠结吧。</p><p>对了，QFrameworkPro 版本的协议如下：</p><p><img src="https://file.liangxiegame.com/57706870-4958-406f-8e5c-a3e19498e3f9.png" alt="image.png"/></p><p>简单理解，就是你付费买了插件，就可以按照 MIT 的协议使用插件的源码。</p><p>但是由于 QF Pro 引用了一些其他协议的项目，所以请尊重他们的开源协议，最低限度只需包含协议声明即可。</p><p>接下来做啥呢？</p><p>最近感兴趣的 MoonSharp 一个 Lua 方案，然后最开始写的代码生成即 CodeGenKit，要么就是试试 xNode。</p><p>反正随心情吧，都试试，然后产品化，看看哪个比较合适先搞。</p><ul><li>AssetStore 版本地址（文中的版本以提交，正在等待审核）：<a href="http://u3d.as/SJ9">http://u3d.as/SJ9</a></li><li>自己平台地址（文中的版本已发布）：<a href="https://www.gamepixedu.com/course/72">https://www.gamepixedu.com/course/72</a></li><li>QFramework 开源版地址：<a href="https://github.com/liangxiegame/QFramework">https://github.com/liangxiegame/QFramework</a></li><li>QFramework QQ 群：623597263</li><li>此文首发于 <a href="http://doc.qframework.cn">http://doc.qframework.cn</a> 或 <a href="https://qframework.cn">https://qframework.cn</a></li><li>转载请注明地址：<a href="https://liangxiegame.com">https://liangxiegame.com</a>  在这个地址可以看到我全部的作品链接</li></ul><p>就说到这吧，不墨迹了。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[QFramework Pro 开发日志（三）DocKit 功能展示-文本节点、图像节点]]></title>
            <link>http://doc.qframework.cn/blog/devnote3</link>
            <guid>devnote3</guid>
            <pubDate>Mon, 07 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[首先作为一个开源框架/AssetStore 插件的作者深知，维护插件、框架的使用文档是一件很麻烦的事情。]]></description>
            <content:encoded><![CDATA[<p>首先作为一个开源框架/AssetStore 插件的作者深知，维护插件、框架的使用文档是一件很麻烦的事情。</p><p>大部分主流的文档方案，基本都是用 markdown 编写。</p><p>不管是用 markdown 编写 还是用 word 还是其他的方式写文档，都涉及一个文件管理的问题。</p><p>这些文件要么部署在网站上，要么部署在 github 上，要么会随着代码包含在插件里。</p><p>文件维护起来会很麻烦，而每次修改文档，也需要找到对应的文件。</p><p>对于文档维护，有了第一个痛点，就是文档管理的痛点。</p><p>第二个痛点，就是阅读的痛点，每次自己买完插件或者下载好别人的框架，都需要跳转到网页去看文档，或者如果插件中已经包含了文档，那么我需要下载一个对应的软件把文档打开，有时是 pdf、有是能打开 .md 格式的软件，有时需要是 Word，总之多多少少需要在多个软件之间来回切换，IDE、Unity、文档阅读器（浏览器、World、Typora 等等），总之对于只用一个屏幕的童鞋来说，非常不方便。</p><p>这就是第二个痛点，阅读的痛点。</p><p>然后就是第三个痛点，语言的痛点，很多插件的文档都是英文的，所以很多好用的插件，在国内的使用率差了一大截，原因就是没有对中文支持。</p><p><img src="https://file.liangxiegame.com/82d2ec82-be0c-46d2-bf0a-c606876b4b18.png"/></p><p>所以关于文档这块，有三个痛点，总结如下：</p><ul><li>文档管理的痛点：需要维护文件、需要部署。</li><li>阅读的痛点：需要对应软件打开、需要多个软件之间切换。</li><li>语言的痛点：中文不支持。</li></ul><p>而 QF Pro 给出的方案，就是 DocKit。</p><p>首先关于第一个痛点，文档管理的痛点，DocKit 是这样做的。</p><p>首先在项目中任意位置，即可创建文档文件，操作如下：</p><p><img src="https://file.liangxiegame.com/1fe6b088-e15a-4080-9437-ff7a77ff782d.png" alt="image.png"/></p><p>创建好了之后，目录如下：</p><p><img src="https://file.liangxiegame.com/f63e5afc-ff65-4ec6-b99c-d4ed07f92ba3.png" alt="image.png"/></p><p>首先文档文件的 Inspector ，有一个 EN 的选项框，按下之后，变成如下：</p><p><img src="https://file.liangxiegame.com/23b60185-b507-41b8-ac3e-544ad50244e9.png" alt="image.png"/></p><p>这里全部都变成了英文，也就是说 QFramework Pro，都会支持中英文。</p><p>（毕竟，QF Pro 上架 AssetStore，需要去赚老外的钱。。。）</p><p>OK，我们切换回来，如下：</p><p><img src="https://file.liangxiegame.com/4cc1e724-a442-499b-aa10-58fac96a5e16.png" alt="image.png"/></p><p>我们点击打开窗口，或者我们也可以直接双击文档文件，之后可以看到如下图所示的窗口。</p><p><img src="https://file.liangxiegame.com/73539d9a-4bdf-4f96-80f4-c7afc76a988f.png" alt="image.png"/></p><p>现在卵都没有。</p><p>我们先创建第一个节点，文本节点，鼠标右键选择 Create Node，如下：</p><p><img src="https://file.liangxiegame.com/a04a7dd9-80a5-49d3-bff6-e69f75342ff7.png" alt="image.png"/></p><p>然后选择 DocKit/TextNode 文本节点，如下：</p><p><img src="https://file.liangxiegame.com/3ac83acb-5d36-4190-92cb-bce46d9c48a0.png" alt="image.png"/></p><p>这样就创建好了一个文档节点，如下：</p><p><img src="https://file.liangxiegame.com/b9e70ecb-b6c1-40e6-a5df-4988877e3c5c.png" alt="image.png"/></p><p>以上就是文本节点的创建流程。</p><p>下面我们给他支持英文文档，如下:</p><p><img src="https://file.liangxiegame.com/da60c37d-2bae-481d-918a-d0527d315ef1.png" alt="image.png"/></p><p>只要只要勾选右上方的 EN 选框就能支持中英文切换。</p><p>接着，我们来进行简单的导出功能，如下：</p><p><img src="https://file.liangxiegame.com/0a6b0358-f45e-45a8-aa78-db47c1bcffeb.png" alt="image.png"/></p><p>点击生成 Markdown 文件，</p><p>之后会在目录看到如下:</p><p><img src="https://file.liangxiegame.com/d96aebd0-fd71-4ed0-8316-90c34a837151.png" alt="image.png"/></p><p>我们用支持 Markdown 格式的软件打开，如下所示：</p><p><img src="https://file.liangxiegame.com/24f59851-bb1e-495a-af93-887a4a697fbf.png" alt="image.png"/></p><p>OK，以上就是 DocKit 的基本使用流程。</p><p>流程如下：</p><ul><li>创建文档文件</li><li>创建文本节点</li><li>编写文档</li><li>导出为 Markdown</li></ul><p>那么这样的流程，如何解决了三个痛点呢？</p><ul><li>对于文档管理来说，只需要将文档文件和插件一起放在目录里即可，这样即方便修改维护，也适合直接发布，也省去了用户需要额外打开网页或者下载阅读软件的麻烦。最重要的是，支持离线阅读，不用有网络环境。</li><li>对于文档阅读来说，文档的表现形式是图的形式，图的形式天生比文字文档更直观更容易阅读，而且用户无需安装其他软件，仅仅是在 Unity 内部即可阅读文档，既然 Unity 支持了这么方便好用的编辑器，当然文档的方式也要用 Unity 的方式解决了，这很酷，不是么。</li><li>对于语言问题来说，QF Pro 肯定是要支持中文文档的，毕竟是现在国内发展起来的框架，其次，也要支持英文，毕竟也要上 AssetStore 去赚美刀，也是一个国际化的必经之路，QF 的 DocKit 支持了一键切换中英文，任何位置都支持切换的选项框。</li></ul><p>所以以上的三个痛点都算解决了。</p><p>在这个基础之上，还支持了 Markdown 导出的功能。</p><p>为什么要支持 Markdown 导出呢？</p><p>因为我们并不是 24 小时都待在电脑旁的，有的时候，我们阅读文档是在手机或者 ipad 上看的，这个时候如果 DocKit 写的文档只在 Unity 内观看的话，就有点太鸡肋了，所以就支持了 markdown 格式的导出。</p><p>markdown 格式几乎支持转成任何文档格式：word、pdf、textbundle、html 等等，所以只要支持个 markdown 格式也就解决了这个问题。</p><p>其实自己研究过一套 pdf 导出方案，无奈，为了实现这个功能依赖了十几兆的其他库，不值当，所以就舍弃掉这个功能了。</p><p>这就是 DocKit 的一个基本介绍了。</p><p>DocKit 除了支持文档节点，还是支持图像节点，如下所示。</p><p><img src="https://file.liangxiegame.com/171ddd44-f36d-4d9e-a0fb-4eda721abbbe.png" alt="image.png"/></p><p>图像创建流程与文本节点一样，不再赘述。</p><p>从外部导入图片的方式如下，点击 ... 按钮，会打开桌面文件夹，如下所示：</p><p><img src="https://file.liangxiegame.com/57db6c45-469a-4f87-9d54-022804f63f4b.png" alt="image.png"/></p><p>这里笔者选择一张图片，然后打开，结果如下：</p><p><img src="https://file.liangxiegame.com/8c00b822-e5c7-452d-b9c6-b122af5a9229.png" alt="image.png"/></p><p>这样图像节点就导入进来了。</p><p>导入存放的目录，默认在同名目录的 Editor 目录下，如下：</p><p><img src="https://file.liangxiegame.com/da30c681-af71-4be3-981a-aaec0efe7e92.png" alt="image.png"/></p><p>如果重复导入同名文件，则会自动用 ID 改名，如下：</p><p><img src="https://file.liangxiegame.com/f8411d3b-ab94-444e-bcbe-0da8a606b4b2.png" alt="image.png"/></p><p>如果重复资源或者图片修改了比较多，会产生很多无用资源，这里只需按下文档文件的清空不用的图片资源按钮即可，如下：</p><p><img src="https://file.liangxiegame.com/360e7ba0-12b6-429a-aafd-3a1735bb243d.png" alt="image.png"/></p><p>不过目前，这两个封面 和 封面1 这两个图片都有被引用，因为在第一次设置贴图资源的时候，如果 中文图片 和 英文图片都没有进行设置过，那么会把设置的图片同时设置给 中文图片 和 英文图片。</p><p>因为很多时候中英文图片引用的是同一张。</p><p>然后刚才的操作中，又导入了一张图片，此时只会讲当前语言的图片替换，也就是说现在 中文图片是封面1 英文图片是封面2。</p><p>所以还需要再导入一次图片，然后点击清空不用的图片资源，结果如下：</p><p><img src="https://file.liangxiegame.com/d2ad4893-fb31-4a09-94c6-df64af6d9b38.png" alt="image.png"/></p><p>OK，这是图片节点的导入功能。</p><p>为什么要从桌面开始导入呢？</p><p>因为很多截图软件（比如 Mac 自带的截图软件）都是截图之后会自动保存到桌面，为了配合这个特性，所以图片节点的导入就默认打开桌面文件夹了，这样会形成一个流程上的闭环，如果习惯了写文档的效率会非常高。</p><p>不过，其实更高的方式是截图完直接从剪切板中获取图片，然后直接粘贴到文档中，但是这个功能，要实现需要依赖  Mono2.0 的  System.Windows.Form.dll 和 System.Drawing.dll 这两个文件，所以同样弃用了，QF Pro 要尽可能少的依赖，不然很容易和前天插件其冲突，后期维护起来会很麻烦。</p><p>OK，图像节点创建好了，当然也支持导出为 Markdown 功能了，我们导出一次 Markdown，结果如下：</p><p><img src="https://file.liangxiegame.com/f4943629-00aa-4c65-99fe-3d34d1cad616.png" alt="image.png"/></p><p>完美。</p><p>好了，介绍好了 文本节点和图像节点，其实还要支持很多其他节点，比如表格节点、一些动作节点支持简单的编程，还有代码展示节点，大标题小标题节点、GIF 动画节点等等，而剩下就是扩展节点的工作量了，这部分慢慢做就可以，可以将重心转到下一个模块的开发了。</p><p>除了实现以上功能外，还对 GraphView 做了很多调教工作，比如双击文档区可以支持全屏/窗口切换，如下：</p><p>窗口：</p><p><img src="https://file.liangxiegame.com/bd9b7544-f08c-45b2-a227-09d2d0f40458.png" alt="image.png"/></p><p>全屏：</p><p><img src="https://file.liangxiegame.com/f136a518-1fb9-41db-a152-8d9db09073b6.png" alt="image.png"/></p><p>还有其他的小功能，DocKit 的整体进度如下：</p><p><img src="https://file.liangxiegame.com/2bd5b32f-c71f-4499-b7ce-d82f552c9a22.png" alt="image.png"/></p><ul><li><p>DocKit - 使用可视化编程编写项目文档（正在进行）</p><ul><li><p>节点</p><ul><li>文本（已完成）</li><li>图像（正在进行）</li><li>GIF 动画（接下来）</li><li>表格节点</li><li>动作列表节点（可以执行）</li></ul></li><li><p>导出</p><ul><li>Makrdown（已完成）</li><li>PDF（已完成，由于会依赖几十招的 dll，所以功能取消）</li></ul></li><li><p>导入</p><ul><li>图片节点 快速从项目外部导入图片（已完成）</li><li>图片导入时重名自动增加计数 ID 为后缀（已完成）</li></ul></li><li><p>多语言</p><ul><li>中英文切换已完成）</li><li>生成的 Makrdown 文件，支持中英文版本作为后缀（已完成）</li><li>图像节点支持中英文同时引用同一张图片功能（已完成）</li></ul></li><li><p>中英文切换（已完成）</p></li><li><p>手势</p><ul><li>双击全屏/窗口切换(已完成)</li><li>快速创建接节点(Ctrl/CMD + 鼠标左键）（已完成）</li><li>双击图像文件自动打开窗口（已完成）</li></ul></li></ul></li></ul><p>所有的 UI 库，不管是 NGUI 和 UGUI、还是 UIElement 等，最先实现的基础控件基本都是 文本控件 和 图片控件，因为任何其他的空间都可以用文本控件和图片控件组合而成。</p><p>所以，DocKit 支持了 文本节点 和 图片节点，就能满足大部分的需求了，因为不管是代码还是表格都能用图片的形式来展示。</p><p>之所以先做 DocKit，是因为，要做好一个插件和方案，文档是非常重要的部分，文档做好了，可以节省大量的时间、精力和团队间的沟通成本。</p><p>而不管是独立游戏、还是公司的项目、或者是开发插件和框架、本质上都是软件工程，软件工程中文档是非常重要的。</p><p>而 QFramework Pro 版本会有大量的文档编写需求。</p><p>但是这里笔者有一个小的观点，产品的设计，尽可能让用户开箱即用，就是最好做到不用看说明书就能上手使用，比如苹果手机等。</p><p>所以笔者会选择直接给个选项框，来切换中英文，如下：</p><p><img src="https://file.liangxiegame.com/de4adb9b-b962-4c86-8295-a15be1f5920a.png" alt="image.png"/></p><p>而不是写个文档，告诉用户，中英文如何切换 blablabla。</p><p>产品设计和关卡设计是有点通的，关卡设计中使用金币来引导玩家来做出设计师想让玩家做的操作是一个很常见的套路。</p><p>就是一个东西最好是一看就能明白，这个就是一个小小的理念吧，一是使用体验会好一点，二是能介绍大量的文档编写工作量（逃。。。。）</p><p>OK，关于 DocKit 就说道这里，DocKit 只是 QF Pro 众多功能规划中的一个小功能，后续还会有很多。</p><p>还有一件事情，由于 AssetStore 审核需要 3 个工作日，所以 QF Pro 将会分为两个版本发布。</p><p>一个版本是 AssetStore 版，即稳定版，由于审核需要 3 个工作日，当 QF Pro 的用户遇到紧急问题时无法尽快修复。</p><p>所以，再开一个快速迭代版本，这个版本就放在自己平台发布了。</p><p>AssetStore 版和 快速迭代版，不支持互相转换，建议只买一个版本，AssetStore 版更稳定，快速迭代版功能更快体验到问题也能及时修复，但是相对会不稳定一些，很有可能有 API 的变更。</p><p>当然如果你想多多支持 QF Pro 让他更好，也可以两份都购买作为支持和鼓励。</p><p>目前此文所述的功能，已在快速迭代版中支持，而 AssetStore 只要当前版本审核通过了，会立即提交快速迭代版当时的相对稳定的版本。</p><p>快速迭代版，会优先编写中文文档，每当可以发布 AssetStore 版本时，会进行文档的翻译工作。</p><p>QF Pro 目前暂不兼容 QFramework 的开源版本（ToolKits 版），但是会随着 QF Pro 的迭代，慢慢将 API 兼容到 QFramework 的开源版本，所以目前不要直接升级 QF 开源版到 Pro 版本，建议在新工程中体验 QF Pro 的功能。</p><p>任何 QFramework Pro 的更新信息，会优先发布在此系列的专栏、视频中，所以对 QF Pro 感兴趣的童鞋多多关注笔者，以方便获取更新。</p><p>OK 就说道这里。</p><h2>各种地址</h2><ul><li><p>DocKit 所参考的可视化编辑方案</p><ul><li><p>XNode（参考一部分功能） 地址：<a href="https://github.com/Siccity/xNode">https://github.com/Siccity/xNode</a></p><ul><li><a href="https://github.com/Siccity/xNode">https://github.com/Siccity/xNode</a></li></ul></li><li><p>BlueGraph（参考一部分功能和样式，颜值最高，但是 bug 也最多）</p><ul><li><a href="https://github.com/McManning/BlueGraph">https://github.com/McManning/BlueGraph</a></li></ul></li><li><p>NodeGraphProcessor（主要是这个，DocKit 再次基础上魔改，最新版适配了 2019.3）</p><ul><li>地址：<a href="https://github.com/alelievr/NodeGraphProcessor">https://github.com/alelievr/NodeGraphProcessor</a></li></ul></li><li><p>感谢烟雨大佬的关于 NodeGraphProcessor 的一篇文章，其中的架构图让我很快弄清楚了 NodeGraphProcessor 的结构</p><ul><li>地址：<a href="https://zhuanlan.zhihu.com/p/362259030">https://zhuanlan.zhihu.com/p/362259030</a></li></ul></li></ul></li><li><p>QFramework Pro AssetStore 主页：<a href="http://u3d.as/SJ9">http://u3d.as/SJ9</a></p></li><li><p>快速迭代版（众筹地址）：<a href="https://www.gamepixedu.com/course/72">https://www.gamepixedu.com/course/72</a></p></li><li><p>QFramework QQ 群：623597263</p></li><li><p>此文首发于 <a href="http://doc.qframework.cn">http://doc.qframework.cn</a> 或 <a href="https://qframework.cn">https://qframework.cn</a></p></li><li><p>转载请注明地址：<a href="https://liangxiegame.com">https://liangxiegame.com</a>  在这个地址可以看到我全部的作品链接</p></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[QFramework Pro 开发日志（二）为啥要搞 Pro]]></title>
            <link>http://doc.qframework.cn/blog/devnote2</link>
            <guid>devnote2</guid>
            <pubDate>Sun, 06 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[自己的独立游戏《鬼山之下》鸽了有半年了。]]></description>
            <content:encoded><![CDATA[<p>自己的独立游戏《鬼山之下》鸽了有半年了。</p><p>上一次《鬼山之下》的大规模的功能新增是在 8 月份左右。然后感觉一直用 AssetStore 的素材也不是长久之计。于是就花了 2 个月的时间去学美术去了，把美术需要的基础都过了一遍，而现在基本上美术可以说是入门了。学完美术就到 10 月份了，还有一个月就双十一，于是就全部时间都花在了双十一的新课筹备上了，然后就一直忙，忙到 1 月 1 日，反正面包是要排在理想之前的。</p><p>在 1 月 1 日的时间点，自己的大部分教程都完结了，于是就又开了新坑，开始准备一个平台跳跃的课程案例，准备了 1 个月，2 月份开始录制课程，录了一个月加上春节初二～初四连续在 b 站直播 3 天，每天 3 ～ 6 小时的直播时长，结果嗓子就开始发炎了，连续打了一周点滴没见好，医生说只能静养了，课就不能录课了。</p><p>所以自己的所有正在进行的课程都暂停掉了。</p><p>这个时候我在想能做什么事情，一是可以接着制作《鬼山之下》，二是接着往下制作平台跳跃课程的案例。</p><p>结果我选择了搞 QFramework Pro 版本。</p><p>为啥要搞 QFramework 的 Pro 版本。</p><p>这里简单说明一下，在之前 QFramework 的大部分用户群体都是在公司上班的童鞋，可以说 QFramework 开源版本是面向企业和公司的。</p><p>而自己有半年多的独立游戏《鬼山之下》的制作经验，在个人或者小团队制作独立游戏的时候，要解决的问题与企业或者公司要解决的问题是有不少区别的。</p><p>公司和企业由于大部分都是做移动端手游的居多，所以游戏的性能很重要，于是就有了一些资源管理方案，QFramework 的资源管理方案是 ResKit。还是由于性能问题，游戏的界面最好可控管理，不能一股脑地把所有界面扔到场景就行了， 还要考虑 Canvas 的 Mesh 重建、层级管理、加载卸载等问题，在这个基础上还要考虑界面的制作效率问题，所以可能会用 FGUI、psd 2 ugui 等解决方案，但是一般面向企业或者公司的框架都会有个 UI 管理框架，有了 UI 管理，可以将没个界面的工作分工出去，而不会造成冲突，也就是说有了 UI 管理也方便团队协作。</p><p>根据以上简单的分析可以得知，面向企业的方案考虑的指标：</p><ul><li>团队协作</li><li>生产效率</li><li>性能</li></ul><p>除此之外有很多公司有资源热更、脚本热更的需求，也有网络的需求。配置表、多语言等等。这里可以说很多，但是就简单啊说这几点足够了。</p><p>所以 QFramework 之前都考虑的都是 企业和公司的需求，当然市面上排名比较靠前的框架，基本也都是面向企业和公司需求的。</p><p>至少资源管理、UI管理基本都有，然后有的框架提供架构 MVVM、MVC、ECS 等，有的框架小而美开箱即用，有的框架提供一整套脚本热更方案，等等。基本都是围绕着公司的需求做的，QF 也不例外。</p><p>而自己有幸拥有了半年的独立游戏制作经验，在制作的过程中发现，由于独立游戏很多都是在 pc 上发布，相比于移动端，性能方面更宽松一些。这个时候资源管理方案可能用了反而拖慢游戏的制作进度。所以很尴尬，笔者在做自己的独立游戏的时候就没有用到 QF 的资源管理方案。</p><p>独立游戏基本都是自己一个人开发，所以团队协作也不用考虑了，除非要把一部分制作的工作外包出去。所以 QFramework 里的 UI 方案 也用不了了，唯一用得比较多的只有 QF 里的音频管理方案，再加上一堆工具类库之类的，还有决定版架构部分用得比较多。</p><p>经过自己的经验知道了面向企业的框架和方案，不适合做独立游戏。</p><p>自己做独立游戏遇到的需求：</p><ul><li><p>关卡设计</p><ul><li>关卡脚本：最好用可视化脚本方案，这里笔者用的是 PlayMaker，用得很顺手。</li><li>敌人 AI：也是 PlayMaker，这里也推荐 BehaviorDesigner</li><li>关卡机关、可交互物体：也是 PlayMaker</li></ul></li><li><p>剧情对话：需要用可视化对话树插件，可以用 Dialogue System 或者 NodeCanvas，我买了个国人开发额插件，PlayText 也算好用。</p></li><li><p>背包、任务、成就，这里也都用的各种插件，什么 Inventory System、Quest Machine 等等</p></li><li><p>基本上这些算是笔者花了钱才解决的需求吧，如果按照以往自己只做开发的话，以上这些自己都能手撸，但是无奈，做独立游戏不能只专注在技术上，还有很多其他事情要做，所以这些方案能买就都通过花钱解决了，独立游戏，时间是稀缺资源。</p></li></ul><p>这个是独立游戏制作的时候遇到的需求，好在都有对应的不错的方案，但是 QFramework 没有支持这些。</p><p>除了制作独立游戏，自己做独立游戏的课程也需要以上的这些工具的，否则，这些要么在课程里从头手敲出来，要么告诉童鞋去卖这个插件那个插件，课程里用这个插件那个个插件的，这两种都不太好，全都手敲课程猴年马月能完结？如果全都让童鞋买买买，本来学课程的群体是学生和刚入行的童鞋居多，基本也没什么钱，在花钱买动砸 300 ～ 400 的插件，肯定吃不消。</p><p>再加上自己的 框架搭建 决定版 后续第四季 ～ 最终季 也需要有一些解决方案设计的案例来讲，然后前边自己做独立游戏的需求还有做独立游戏课程的需求，最终思考出来的答案，就是让 QFramework 也提供以上独立游戏需要的工具。</p><p>于是就开始构思 QFramework 的 Pro 版本了，因为工作量实在太多，提供的功能也实在太多，而免费开源版，被抄烂了 😂，所以这次就象征性地定了一个 AssetStore 的最低价，4.99 刀。</p><p>抄可以抄，因为很多开源协议是允许抄的，但是我更希望抄也是按照开源的规矩的抄，自己抄过或者参考过就坦诚一点，别搞的抄完之后这个当作自己发明的东西了，好在这种人我也就遇到一两个，大部分朋友借鉴完，还是会厚道地给 QFramework 一个链接地址的。</p><p>当然 QFramework 的开源版，从 19 年开始就没怎么加新功能了，首先说明版本稳定能用，其次还想说，这两年我自己代码水平进步了不少，19 年的开源版只是我 19 年的水平。19 年之后，我给一公司带了 9 个月的项目，再往后设计了决定版架构，之所以叫决定版架构，是因为这套架构的演化过程我给出了一套课，叫 Unity 游戏框架搭建 决定版，在 Unity 中文课堂有售。所以这次 QFramework Pro 会以现在的代码水平来开发，做出来应该会比 QFramework 的开源版先进很多，清爽很多，好用很多。</p><p>由于 QFramework Pro 是在开源版基础之上开发的，所以也会慢慢把开源版的代码重新整理一下，一些积攒的小问题也都一一修复掉。</p><p>OK，差不多到这里说清楚了，为啥要搞 Pro。</p><ul><li>自己独立游戏需要各种工具集</li><li>自己的独立游戏课需要</li><li>自己的框架搭建 决定版 第四季往后需要讲很多工具&amp;方案设计的内容，刚好多积攒一些案例。</li></ul><p>除了这三点，还有一点，就是其实自己一直想试试在 AssetStore 出付费插件的，QFramework 的 AssetStore 在 2017 年就申请好了，当时想着以后万一自己有能力在 AssetStore 出付费插件呢，那得多屌啊，还能赚零花钱花。而现在 4 年过去了，时机刚好。刚好自己因病不能肝教程。。。也刚好自己做独立游戏《鬼山之下》开始厌倦了，一想到做鬼山之下就头疼。</p><p>鬼山之下虽然鸽了半年，但是 steam 上的版本，是能完能通关的，这是因为游戏一开始就是能完整体验的版本了（所谓的闭环），这个在鬼山的开发日志里说过，所以鸽得再久都没事，哪天来了创作欲加上 时机不错 就接着推进呗。更何况，我现在做得每一件事情都对推进《鬼山之下》有帮助，比如 QF Pro 出来了，那么鬼山的很多工具集用 QF 我自己写的，自己写的好处就是自己魔改起来游刃有余，也更顺手。再比如 独立游戏课 会逼自己去把经验总结出来分享出来，这个对提升自己游戏制作能力是有很大提升的，在总结过程中叫不准的要看很多资料，当然持续学习是必须的，还能用这个经验换点资金，来接着推进《鬼山之下》。所以独立游戏《鬼山之下》虽然没有实际推进，但是也间接推进了，去学了 2 个月美术，双十一忙着挣钱，出独立游戏教程，写 QF Pro，都对《鬼山之下》有推进作用。</p><p>好了，差不多就说到这吧。</p><p>从 3 月 1 日开发 QFramework Pro 开始，又体会到了写代码的快乐，自己骨子里还是个程序员啊，只考虑写代码真的很快乐，有点找到初心的感觉。</p><p>回想 qframework 七年前刚开源时，写的文章时 Unity 游戏框架搭建（一）概述（现在叫 Unity 游戏框架搭建 2017（一）概述）。</p><p>在概述里画了个大饼，从单例模式 到 ManagerOfManagers，再到 StrangeIOC、uFrame 这种 MVX 模式。QFramework 的开源版，也从最初的 Singleton 架构，慢慢发展成 Manager Of Managers 架构，再到去年年中，QFramework 系统设计架构（System Design Architecture 现在简称 决定版架构）正式完善，决定版架构 就是 和 StrangeIOC、uFrame、还有 PureMVC 这样的同等定位的架构，不过整个源码只有不到 800 行。有了决定版架构，也算是把七年前的概述走完了吧。所以走完了之后，再下一个小目标，就是笔者目前正在做的 Pro 版本。</p><p>好了，碎碎念了很多， 感谢大家愿意看到这里。</p><p>祝我顺利吧。</p><p>这篇就写到这里。</p><h2>各种地址</h2><ul><li>QFramework Pro AssetStore 主页：<a href="http://u3d.as/SJ9">http://u3d.as/SJ9</a></li><li>此文首发于 <a href="http://doc.qframework.cn">http://doc.qframework.cn</a> 或 <a href="https://qframework.cn">https://qframework.cn</a></li><li>转载请注明地址：<a href="https://liangxiegame.com">https://liangxiegame.com</a>  在这个地址可以看到我全部的作品链接</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[QFramework Pro 开发日志（一）随便写点啥，3 月开始整活了。]]></title>
            <link>http://doc.qframework.cn/blog/devnote</link>
            <guid>devnote</guid>
            <pubDate>Sat, 05 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[随便写点吧。]]></description>
            <content:encoded><![CDATA[<p>随便写点吧。</p><p>我是 凉鞋 QFramework 的作者。</p><p>3 月之前一直都在制作教程，录制视频，结果录太多再加上一些事情嗓子发炎了，上火了。</p><p>于是就打算让嗓子休息 2 个月。</p><p>不能录课的两个月，只能写文章和写代码。</p><p>而想到自己的 QFramework 有七年了，因为一直做教程，很长时间没加新功能了，所以就打算这两个月时间好好搞搞 QFramework，出一个 QFramework Pro 版本。</p><p>目前的大致规划如下：</p><ul><li>基础内容（开源免费）<ul><li>UI 框架</li><li>资源管理</li><li>系统设计架构</li><li>音频管理</li><li>各种好用工具类</li><li>ActionKit</li><li>编辑器内文档</li><li>一键自动更新</li></ul></li><li>Pro 内容（先定价 5 刀（ Asset Store 起始价格，后续随着功能越来越多，会慢慢涨价到 30 刀左右）<ul><li>通用<ul><li>背包</li><li>任务、成就</li><li>配置表等</li><li>多语言</li><li>代码生成 + GameObject 自动赋值</li><li>使用可视化设计架构</li></ul></li><li>独立游戏向<ul><li>像素画绘制工具</li><li>MoonSharp 脚本</li><li>PlayMaker 动作支持</li><li>可视化编辑器<ul><li>代码生成配置</li><li>ActionKit 可视化编辑<ul><li>FSM</li><li>BehaviorTree</li><li>Flow Machine</li><li>对话</li></ul></li></ul></li></ul></li><li>企业向<ul><li>xLua、ILRuntime、热更方案。</li><li>网络同步</li><li>插件管理服务器（源码，可自己部署）</li></ul></li></ul></li><li>独立游戏向<ul><li>像素画绘制工具</li><li>MoonSharp 脚本</li><li>PlayMaker 动作支持</li><li>可视化编辑器<ul><li>代码生成配置</li><li>ActionKit 可视化编辑<ul><li>FSM</li><li>BehaviorTree</li><li>Flow Machine</li><li>对话</li></ul></li></ul></li></ul></li><li>企业向<ul><li>xLua、ILRuntime、热更方案。</li><li>网络同步</li><li>插件管理服务器（源码，可自己部署）</li></ul></li></ul><p>而从 3 月 1 日，截止到今天，开发进度如下：</p><p><img src="https://file.liangxiegame.com/185a499e-9e46-4d93-9299-2cd35f78186e.png" alt="img"/></p><p>以上图是，QFramework Pro 的其中一个功能，就是用可视化编程去写文档。</p><p>加 QFramework 群：623597263 可以获得实时开发进度。</p><p>当然等第一个小功能完善之后就会在 QFramework Pro 的 AssetStore 主页更新：</p><p>AssetStore 主页地址：</p><ul><li><a href="http://u3d.as/SJ9">http://u3d.as/SJ9</a></li></ul><p>注意：AssetStore 目前的版本只有个购买入口，卵都没有。而目前的价格算是众筹价格，5 刀，后续会随着以上规划的逐个功能更新，会逐步涨价。</p><p>另外还有个事情要通知一下：</p><p>凉鞋的好朋友 麦扣老师</p><p>专做 Unity 和 游戏开发教程，学习体验丝滑，多多支持。</p><p>还差 2k 粉丝就 10w 了，恳请大家棒棒忙，关注一下 麦扣老师的 b 站，帮助他早日达到 10w 粉丝</p><p>b 站地址：<a href="https://space.bilibili.com/370283072">https://space.bilibili.com/370283072</a></p><p>各种地址：</p><ul><li>QFramework github 地址：<a href="https://github.com/liangxiegame/QFramework">https://github.com/liangxiegame/QFramework</a></li><li>麦扣老师 b 站地址：<a href="https://space.bilibili.com/370283072">https://space.bilibili.com/370283072</a></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[欢迎]]></title>
            <link>http://doc.qframework.cn/blog/welcome</link>
            <guid>welcome</guid>
            <pubDate>Thu, 27 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[大家好呀，我是 QFramework 的作者 凉鞋。]]></description>
            <content:encoded><![CDATA[<p>大家好呀，我是 QFramework 的作者 凉鞋。</p><p>这是第一篇 QFramework 的博客。</p><p>感觉这套模板还是挺好用的。</p><p>先用来写写东西看看。</p>]]></content:encoded>
        </item>
    </channel>
</rss>